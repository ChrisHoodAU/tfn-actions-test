
name: Deploy

on:
  push:
    branches:
      - main

jobs:

  inform_about_apply:
    name: Inform About Apply
    runs-on: ubuntu-latest

    steps:
      - name: Inform on PR that Apply is Running
        uses: mshick/add-pr-comment@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          repo-token-user-login: 'github-actions[bot]'
          message: |
            ***Running terraform apply***
            Results will display here momentarily...   

  Terraform:
    name: Terraform Plan & Apply
    runs-on: ubuntu-latest
    steps:

    - name: Checkout Repo
      uses: actions/checkout@v2

    - name: Terraform Setup
      uses: hashicorp/setup-terraform@v1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2

    - name: Terraform Init
      run: terraform init
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        TF_ACTION_WORKING_DIR: '.'

    - name: Terraform validate
      run: terraform validate

    - name: Plan Terraform
      id: plan
      continue-on-error: true
      run: |
        terraform plan -input=false -no-color -out=tfplan \
        && terraform show -no-color tfplan          

    # Sed is taking all lines that begin with one or more spaces followed by a `+` or `-`.
    # It stores the amount of spaces in `\1` and the +/- in `\2`.
    # Then replace that portion of the line with `\2\1` (+/- followed by the number of matched spaces).
    - name: Reformat Plan
      if: steps.plan.outcome == 'success'
      run: |
        echo '${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}' \
        | sed -E 's/^([[:space:]]+)([-+])/\2\1/g' > plan.txt          

    - name: Put Plan in Env Var
      if: steps.plan.outcome == 'success'
      run: |
        PLAN=$(cat plan.txt)
        echo "PLAN<<EOF" >> $GITHUB_ENV
        echo "$PLAN" >> $GITHUB_ENV
        echo "EOF" >> $GITHUB_ENV          

    - name: Apply Terraform
      if: steps.plan.outcome == 'success'
      id: apply
      continue-on-error: true
      run: |
        terraform apply -input=false -no-color tfplan          

    - name: Post Plan and Apply to GitHub PR
      if: steps.plan.outcome == 'success' && steps.apply.outcome == 'success'
      uses: mshick/add-pr-comment@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        repo-token-user-login: 'github-actions[bot]'
        message: |
          Applying **main**:

          ```diff
          ${{ env.PLAN }}
          ```

          ```
          ${{ steps.apply.outputs.stdout }}
          ```            

    - name: Post Plan Failure
      if: steps.plan.outcome == 'failure'
      uses: mshick/add-pr-comment@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        repo-token-user-login: 'github-actions[bot]'
        message: |
          Plan failed for **main**:

          ```
          ${{ steps.plan.outputs.stderr }}
          ```            

    - name: Post Apply Failure
      if: steps.apply.outcome == 'failure'
      uses: mshick/add-pr-comment@v1
      with:
        repo-token: ${{ secrets.GITHUB_TOKEN }}
        repo-token-user-login: 'github-actions[bot]'
        message: |
          Apply failed for **main**:

          ```
          ${{ steps.apply.outputs.stderr }}
          ```            
